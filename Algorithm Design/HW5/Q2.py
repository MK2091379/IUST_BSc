# -*- coding: utf-8 -*-
"""HW1_SayyedMoeinKazemi_98521396.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CRZieAWwv-YsWFYROJiBUyARo4x93g-p
"""
from sys import setrecursionlimit,stdin,maxsize
from threading import stack_size
from numpy import array, zeros
setrecursionlimit(10**6)
stack_size(2**27)
class Graph: 
    def __init__(self, v): 
        self.V = v
        self.graph = list()
    def addEdge(self, u, v, w): 
        self.graph.insert(len(self.graph)-1,[u, v, w]) 
    def BellmanFord(self, source,rechedV): 
        distination = [float("Inf")] * (self.V) 
        distination[source] = 0
        i = 0
        while i <self.V - 1: 
            for u, v, w in self.graph: 
                if not(distination[u] == float("Inf") or distination[u] + w >= distination[v]): 
                        distination[v] = distination[u] + w 
            i+=1
        for u, v, w in self.graph: 
                if not(distination[u] == float("Inf") or distination[u] + w >= distination[v]): 
                        print("MIA GETS RICH")
                        return None
        if(not(distination[rechedV] == float("Inf"))):
            print(distination[rechedV]) 
        elif(not(distination[rechedV] != float("Inf"))):
            print("NO WAY")
graphAtribute = [int(i) for i in input().split()]
g = Graph(graphAtribute[0]+1) 
for i in range(graphAtribute[1]):
    Inputes = [int(i) for i in input().split()]
    g.addEdge(Inputes[0],Inputes[1],Inputes[2])
source_destination = [int(i) for i in input().split()]
g.BellmanFord(source_destination[0],source_destination[1]) 